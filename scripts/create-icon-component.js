const fs = require('fs')
const path = require('path')
const prettier = require('prettier')

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
}

function camel(str) {
  return str
    .split('-')
    .map(capitalize)
    .join('')
}

const TARGET_DIR = path.resolve('src/components/icon')

const ICON_NAMES = fs
  .readdirSync('./public/icons')
  .map(name => name.replace('.svg', ''))

const COMPONENT_NAMES = ICON_NAMES.map(camel)

if (!fs.existsSync(TARGET_DIR)) {
  fs.mkdirSync(TARGET_DIR)
}

function getCode() {
  const importFmt = (name, i) =>
    `import ${COMPONENT_NAMES[i]} from '../../../public/icons/${name}.svg'`

  const dictEntryFmt = (name, i) => `'${name}': ${COMPONENT_NAMES[i]}`

  return `
    /* THIS FILE IS AUTOGENERATED BY RUN \`yarn cic\`, YOU DON'T NEED EDIT IT */
    import React from 'react'
    ${ICON_NAMES.map(importFmt).join('\n')}

    const iconsDict = {
      ${ICON_NAMES.map(dictEntryFmt)}
    }

    export type IconName = keyof typeof iconsDict

    export const iconNames = Object.keys(iconsDict) as IconName[]

    interface IconProps extends React.SVGProps<SVGSVGElement> {
      name: IconName
    }

    export default function Icon({ name, ...props }: IconProps) {
      return React.createElement(iconsDict[name], props)
    }
  `
}

prettier.resolveConfig(__filename).then(options => {
  fs.writeFileSync(
    path.resolve(TARGET_DIR, 'index.tsx'),
    prettier.format(getCode(), { ...options, parser: 'typescript' })
  )
})
